# -*- coding: utf-8 -*-
#
import os
import uuid
from hashlib import md5
from celery import current_task
from django.db import models
from django.utils.translation import gettext_noop, gettext_lazy as _
from django.conf import settings

from assets.models import Asset, Node
from assets.tasks import clean_ansible_task_hosts
from common.utils import lazyproperty, ssh_key_string_to_obj, get_logger
from common.validators import alphanumeric
from common.db.fields import EncryptTextField

from .. import const
from .base import (
    BaseChangeAuthPlan,
    BaseChangeAuthPlanExecution,
    BaseChangeAuthPlanTask
)

logger = get_logger(__name__)


class ChangeAuthPlan(BaseChangeAuthPlan):
    class SSHKeyStrategy(models.TextChoices):
        add = 'add', _('Append SSH KEY')
        set = 'set', _('Empty and append SSH KEY')
        set_jms = 'set_jms', _('Replace (The key generated by JumpServer) ')

    username = models.CharField(
        max_length=128, verbose_name=_('Username'),
        validators=[alphanumeric]
    )
    assets = models.ManyToManyField(
        'assets.Asset', related_name='change_auth_plan', blank=True,
        verbose_name=_("Assets")
    )
    nodes = models.ManyToManyField(
        'assets.Node', related_name='change_auth_plan', blank=True,
        verbose_name=_("Nodes")
    )
    is_password = models.BooleanField(default=True)
    ssh_key_strategy = models.CharField(
        max_length=128, blank=True, null=True,
        choices=SSHKeyStrategy.choices,
        verbose_name=_('SSH Key strategy')
    )
    private_key = EncryptTextField(
        max_length=4096, blank=True, null=True,
        verbose_name=_('SSH private key')
    )
    public_key = EncryptTextField(
        max_length=4096, blank=True, null=True, verbose_name=_('SSH public key')
    )
    is_ssh_key = models.BooleanField(default=False)

    recipients = models.ManyToManyField(
        'users.User', related_name='recipient_change_auth_plans', blank=True,
        verbose_name=_("Recipient")
    )

    class Meta:
        unique_together = [('org_id', 'name')]
        verbose_name = _('Asset change auth plan')

    @lazyproperty
    def assets_amount(self):
        return self.assets.count()

    @lazyproperty
    def nodes_amount(self):
        return self.nodes.count()

    def get_register_task(self):
        from ..tasks import execute_change_auth_plan
        name = "change_auth_plan_period_{}".format(str(self.id)[:8])
        task = execute_change_auth_plan.name
        args = (str(self.id), BaseChangeAuthPlanExecution.Trigger.timing)
        kwargs = {}
        return name, task, args, kwargs

    def get_all_assets(self):
        nodes_keys = self.nodes.all().values_list('key', flat=True)
        asset_ids = set(self.assets.all().values_list('id', flat=True))
        nodes_asset_ids = Node.get_nodes_all_asset_ids_by_keys(nodes_keys)
        asset_ids.update(nodes_asset_ids)
        assets = Asset.objects.filter(id__in=asset_ids)
        return assets

    def to_attr_json(self):
        attr_json = super().to_attr_json()
        attr_json.update({
            'username': self.username,
            'assets': [str(asset.id) for asset in self.assets.all()],
            'nodes': [str(node.id) for node in self.nodes.all()],
            'is_password': self.is_password,
            'is_ssh_key': self.is_ssh_key,
            'ssh_key_strategy': self.ssh_key_strategy,
            'private_key': self.private_key,
            'public_key': self.public_key,
        })
        return attr_json

    def execute(self, trigger):
        try:
            hid = current_task.request.id
        except AttributeError:
            hid = str(uuid.uuid4())
        execution = ChangeAuthPlanExecution.objects.create(
            id=hid, plan=self, plan_snapshot=self.to_attr_json(),
            password=self.gen_execute_password(), private_key=self.private_key,
            public_key=self.public_key, trigger=trigger
        )
        return execution.start()


class ChangeAuthPlanExecution(BaseChangeAuthPlanExecution):
    plan = models.ForeignKey(
        'ChangeAuthPlan', related_name='execution', on_delete=models.CASCADE,
        verbose_name=_('Change auth plan')
    )
    public_key = EncryptTextField(
        max_length=4096, blank=True, null=True, verbose_name=_('SSH public key')
    )
    private_key = EncryptTextField(
        max_length=4096, blank=True, null=True,
        verbose_name=_('SSH private key')
    )

    class Meta:
        verbose_name = _('Asset change auth plan execution')

    @property
    def username(self):
        return self.plan_snapshot.get('username')

    @property
    def asset_ids(self):
        return self.plan_snapshot.get('assets')

    @property
    def node_ids(self):
        return self.plan_snapshot.get('nodes')

    @property
    def assets_amount(self):
        return len(self.asset_ids)

    @property
    def nodes_amount(self):
        return len(self.node_ids)

    @property
    def is_password(self):
        return self.plan_snapshot.get('is_password')

    @property
    def is_ssh_key(self):
        return self.plan_snapshot.get('is_ssh_key')

    @property
    def ssh_key_strategy(self):
        return self.plan_snapshot.get('ssh_key_strategy')

    @property
    def manager_name(self):
        return 'asset'

    def create_plan_tasks(self):
        assets = self.plan.get_all_assets()
        valid_assets = clean_ansible_task_hosts(assets)
        valid = len(valid_assets)
        invalid = len(assets) - len(valid_assets)
        logger.info(f'\n提示: 获取到改密计划中待执行资产的数为: {valid} 台，'
                    f'有 {invalid} 不符合条件(不支持ansible)')
        tasks = []
        for host in valid_assets:
            task = ChangeAuthPlanTask.objects.create(
                username=self.username,
                asset=host,
                password=self.get_password(),
                public_key=self.public_key,
                private_key=self.private_key,
                execution=self
            )
            tasks.append(task)
        return tasks


class ChangeAuthPlanTask(BaseChangeAuthPlanTask):
    username = models.CharField(
        max_length=32, verbose_name=_('Username'),
        validators=[alphanumeric]
    )
    asset = models.ForeignKey(
        'assets.Asset', on_delete=models.CASCADE, verbose_name=_('Asset')
    )
    public_key = EncryptTextField(
        max_length=4096, blank=True, null=True, verbose_name=_('SSH public key')
    )
    private_key = EncryptTextField(
        max_length=4096, blank=True, null=True,
        verbose_name=_('SSH private key')
    )
    execution = models.ForeignKey(
        'ChangeAuthPlanExecution', related_name='task',
        on_delete=models.CASCADE, verbose_name=_('Change auth plan execution')
    )

    def __str__(self):
        return '{}@{}'.format(self.username, self.asset)

    class Meta:
        verbose_name = _('Asset change auth plan task')

    @property
    def asset_info(self):
        return {'id': self.asset.id, 'hostname': self.asset.hostname}

    @property
    def private_key_obj(self):
        key_obj = None
        if self.private_key:
            key_obj = ssh_key_string_to_obj(self.private_key, password=self.password)
        return key_obj

    @property
    def private_key_file(self):
        if not self.private_key_obj:
            return None
        project_dir = settings.PROJECT_DIR
        tmp_dir = os.path.join(project_dir, 'tmp')
        key_name = '.' + md5(self.private_key.encode('utf-8')).hexdigest()
        key_path = os.path.join(tmp_dir, key_name)
        if not os.path.exists(key_path):
            self.private_key_obj.write_private_key_file(key_path)
            os.chmod(key_path, 0o400)
        return key_path

    @property
    def handler_name(self):
        return 'asset'

    def pre_start_check(self):
        error = None
        if settings.CHANGE_AUTH_PLAN_SECURE_MODE_ENABLED:
            if not self.asset.admin_user:
                error = gettext_noop(
                    'This asset does not have a privileged user set: '
                ) + str(self.asset)
                return error

            if self.username.lower() == self.asset.admin_user.username.lower():
                error = gettext_noop(
                    "The password and key of the current asset privileged user cannot be changed: "
                ) + str(self.asset)
                return error

        if self.execution.is_password and (not self.password or not self.password.strip()):
            error = gettext_noop('Password cannot be set to blank, exit. ')
            return error

        if self.execution.is_ssh_key and \
                self.execution.ssh_key_strategy == ChangeAuthPlan.SSHKeyStrategy.set and \
                (not self.public_key or not self.public_key.strip()):
            error = gettext_noop('Public key cannot be set to null, exit. ')
            return error
        return error

    def retry_keep_auth_to_authbook(self):
        """重新尝试将本任务的密码保存为最新的密码"""
        self.set_step(step=const.STEP_PERFORM_VERIFY_AUTH)
        self.start()
